// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Article {
//   id      Int     @id @default(autoincrement())
//   title   String
//   content String
// }

// model User {
//   id              String    @id
//   username        String    @unique
//   hashed_password String
//   sessions        Session[]
// }

// model Session {
//   id        String   @id
//   userId    String
//   expiresAt DateTime
//   user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
// }

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  auth_user AuthUser @relation(fields: [userId], references: [id])
  userId    String
}

model Client {
  id       String    @id @unique
  email    String
  name     String
  products Product[]
}

model Product {
  id       String    @id @unique
  name     String
  client   Client    @relation(fields: [clientId], references: [id])
  clientId String
  versions Version[]
}

model Version {
  id         String  @id @unique
  version    Int
  note       String
  state      String @default("pending")
  atachement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  startDate  DateTime @default(now())
  deadline   DateTime?
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
}

model AuthUser {
  id           String        @id @unique
  username     String        @unique
  name         String
  articles     Article[]
  auth_session AuthSession[]
  auth_key     AuthKey[]

  // @@map("authUser")
}

model AuthSession {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  authUser  AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)
  // @@map("authSession")

  @@index([userId])
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  userId          String
  primary_key     Boolean
  expires         BigInt?
  authUser        AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)
  // @@map("authKey")

  @@index([userId])
}
