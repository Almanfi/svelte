generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.sqlite"
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    String
  auth_user AuthUser @relation(fields: [userId], references: [id])
}

model Client {
  id        String    @id @unique
  email     String
  name      String
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id        String    @id @unique
  name      String
  clientId  String
  createdAt DateTime  @default(now())
  client    Client    @relation(fields: [clientId], references: [id])
  versions  Version[]
}

model Version {
  id         String    @id @unique
  version    Int
  note       String    @default("")
  state      String    @default("pending")
  atachement String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startDate  DateTime  @default(now())
  deadline   DateTime?
  productId  String
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model AuthUser {
  id           String        @id @unique
  username     String        @unique
  name         String
  created_at   DateTime      @default(now())
  userSubs     String?
  articles     Article[]
  auth_key     AuthKey[]
  auth_session AuthSession[]
  userGroup    userGroup[]
}

model AuthSession {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  authUser  AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  userId          String
  primary_key     Boolean
  expires         BigInt?
  createdAt       DateTime @default(now())
  authUser        AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model groupPermision {
  name      String      @id @unique
  userGroup userGroup[]
}

model userGroup {
  id             String           @id @unique
  name           String
  AuthUser       AuthUser[]
  groupPermision groupPermision[]
}
