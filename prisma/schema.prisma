// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // url      = "file:./dev.sqlite"
  url      =  env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Article {
//   id      Int     @id @default(autoincrement())
//   title   String
//   content String
// }

// model User {
//   id              String    @id
//   username        String    @unique
//   hashed_password String
//   sessions        Session[]
// }

// model Session {
//   id        String   @id
//   userId    String
//   expiresAt DateTime
//   user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
// }

model Article {
    id      Int    @id @default(autoincrement())
    title   String
    content String
    auth_user    AuthUser   @relation(fields: [userId], references: [id])
    userId  String
}

model AuthUser {
    id       String    @id @unique
    username String    @unique
    name     String
    articles Article[]
    auth_session  AuthSession[]
    auth_key      AuthKey[]

    // @@map("authUser")
}

model AuthSession {
    id             String @id @unique
    userId         String
    expiresAt      DateTime
    authUser           AuthUser   @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
    // @@map("authSession")
}

model AuthKey {
    id              String  @id @unique
    hashed_password String?
    userId         String
    primary_key     Boolean
    expires         BigInt?
    authUser            AuthUser    @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
    // @@map("authKey")
}
